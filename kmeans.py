# -*- coding: utf-8 -*-
"""Kmeans.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cSzy9QDHKrq29aNFOarwW5ONb9ARBqDU
"""

import numpy as np
import matplotlib.pyplot as plt

def initialize_centroids_from_user(k):
    centroids = []
    print("Please enter the initial centroids (one per line):")
    for i in range(k):
        centroid = list(map(float, input(f"Enter coordinates for centroid {i+1} (space-separated): ").split()))
        centroids.append(centroid)
    return np.array(centroids)

def assign_clusters(X, centroids):
    distances = np.linalg.norm(X[:, np.newaxis] - centroids, axis=2)
    return np.argmin(distances, axis=1)

def update_centroids(X, labels, k):
    return np.array([X[labels == i].mean(axis=0) for i in range(k)])

def kmeans(X, k, max_iters=100, tol=1e-4):
    centroids = initialize_centroids_from_user(k)
    print("Initial centroids:", centroids)

    for i in range(max_iters):
        labels = assign_clusters(X, centroids)
        new_centroids = update_centroids(X, labels, k)
        print(f"Iteration {i+1}: Centroids =", new_centroids)

        if np.linalg.norm(new_centroids - centroids) < tol:
            break
        centroids = new_centroids

    return centroids, labels

# User input for dataset
n = int(input("Enter number of data points: "))
k = int(input("Enter number of clusters: "))
X = np.array([list(map(float, input(f"Enter coordinates for point {i+1} (space-separated): ").split())) for i in range(n)])

centroids, labels = kmeans(X, k)
print("Final centroids:", centroids)

# Use X[:, 0] and X[:, 1] for x and y coordinates to match labels
plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis')
plt.scatter(centroids[:, 0], centroids[:, 1], marker='X', s=200, c='red', label='Centroids')
plt.xlabel('X1')
plt.ylabel('X2')
plt.title('KMeans Clustering')
plt.legend()
plt.show()